type: edu
files:
- name: dominoes/dominoes.py
  visible: true
  text: |
    # Write your code here
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TestStage2

    if __name__ == '__main__':
        TestStage2('dominoes.dominoes').run_tests()
  learner_created: false
- name: dominoes/domino_menu.py
  visible: true
  text: |
    from Dominoes.task.dominoes.domino_game import DominoGame


    class DominoMenu:
        def __init__(self, game: DominoGame):
            self._game = game

        def first_move(self):
            print('Stock pieces: ' + self._game.stock_str)
            print('Computer pieces: ' + str(self._game.get_player(0)))
            print('Player pieces: ' + str(self._game.get_player(1)))
            print('Domino snake: ' + str(self._game.snake_str))
            print('Status: ' + self._game.get_player(self._game.move_index).name)
  learner_created: true
- name: dominoes/domino_items.py
  visible: true
  text: |
    from typing import Iterable, Tuple
    from random import shuffle


    class DominoPiece:
        def __init__(self, left: int, right: int):
            self._left = left
            self._right = right

        @property
        def left(self):
            return self._left

        @property
        def right(self):
            return self._right

        def __str__(self):
            return f'[{self._left}, {self._right}]'


    class DominoPile:
        def __init__(self, pieces: Iterable[DominoPiece]):
            self._pieces = list(pieces)

        def read_piece(self, index: int) -> DominoPiece | None:
            return None \
                if index < 0 or index >= len(self._pieces) \
                else DominoPiece(self._pieces[index].left, self._pieces[index].right)

        def pop_piece(self, index: int) -> DominoPiece | None:
            return None \
                if index < 0 or index >= len(self._pieces) \
                else self._pieces.pop(index)

        def add_piece(self, piece: DominoPiece):
            self._pieces.append(piece)

        def __str__(self):
            return '[{}]'.format(', '.join(str(p) for p in self._pieces))


    class DominoStock(DominoPile):
        def __init__(self, pieces: Iterable[DominoPiece]):
            super().__init__(pieces)

        def shuffle(self):
            shuffle(self._pieces)

        def pop_first_n(self, n: int) -> Iterable[DominoPiece]:
            if n > len(self._pieces):
                return []
            popped = self._pieces[:n]
            self._pieces = self._pieces[n:]
            return popped


    class DominoPlayer(DominoPile):
        def __init__(self, pieces: Iterable[DominoPiece], name: str):
            super().__init__(pieces)
            self._name = name

        def highest_double_index_value(self) -> Tuple[int, int]:
            index, value = -1, -1
            for i, p in enumerate(self._pieces):
                if p.left == p.right and p.left > value:
                    index = i
                    value = p.left
            return index, value

        @property
        def name(self) -> str:
            return self._name
  learner_created: true
- name: dominoes/domino_game.py
  visible: true
  text: |
    from typing import List

    from Dominoes.task.dominoes.domino_items import DominoPile, DominoPiece, DominoPlayer, DominoStock


    class DominoGame:
        def __init__(self):
            self._stock: DominoStock | None = None
            self._players: List[DominoPlayer] = []
            self._snake: DominoPile | None = None
            self.move_index = -1
            self.generate_dominoes()

        def generate_dominoes(self):
            while True:
                self._stock = DominoStock(DominoPiece(left, right)
                                          for left in range(7)
                                          for right in range(left, 7))
                self._stock.shuffle()
                self._players = [DominoPlayer(self._stock.pop_first_n(7), name) for name in ('computer', 'player')]
                highest_double_indices = tuple(p.highest_double_index_value() for p in self._players)
                if sum(map(lambda x: x[0], highest_double_indices)) == -len(highest_double_indices):
                    continue

                highest_value = -1
                player_to_donate_index = -1
                highest_value_index = -1
                for i, highest_double_tuple in enumerate(highest_double_indices):
                    if highest_double_tuple[1] > highest_value:
                        highest_value = highest_double_tuple[1]
                        player_to_donate_index = i
                        highest_value_index = highest_double_tuple[0]

                start_piece = self._players[player_to_donate_index].pop_piece(highest_value_index)
                self._snake = DominoPile([start_piece])
                self.move_index = (player_to_donate_index + 1) % len(self._players)
                break

        def get_player(self, i: int) -> DominoPlayer:
            return self._players[i]

        @property
        def stock_str(self):
            return str(self._stock)

        @property
        def snake_str(self):
            return str(self._snake)
  learner_created: true
- name: test/tests.py
  visible: false
  text: "from typing import List, Any\nfrom hstest import StageTest, CheckResult,\
    \ WrongAnswer, TestCase\nimport ast\n\n\nclass TestStage2(StageTest):\n\n    def\
    \ generate(self) -> List[TestCase]:\n        return [\n            TestCase(),\n\
    \            TestCase(),\n            TestCase()\n        ]\n\n    def get_the_stock(self,\
    \ reply):\n        \"\"\"Get the player's stock\"\"\"\n        if reply.find(\"\
    0:\") == -1:\n            try:\n                ind = reply.find(\"1:\")\n   \
    \             ind2 = reply.lower().find(\"status\")\n                list_stack\
    \ = reply[ind:ind2].strip().split('\\n')\n                stock = [i.split(':')[1].strip()\
    \ for i in list_stack]\n                try:\n                    stock = [ast.literal_eval(i)\
    \ for i in stock]\n                except (ValueError, SyntaxError):\n       \
    \             raise WrongAnswer(\"An error occurred while processing your output.\\\
    n\"\n                                      \"Please make sure that your program's\
    \ output is formatted exactly as described.\")\n                return stock\n\
    \            except Exception:\n                raise WrongAnswer(\"Please, output\
    \ all pieces in the format: \\\"N:[N1, N2]\\\"\\n\"\t\n                      \
    \            \"Don't forget the colon character as a separator.\")\n        raise\
    \ WrongAnswer(\"When you print the player's pieces, the numbering should start\
    \ from 1, not 0.\")\n\n    def check_the_stock(self, reply):\n        \"\"\"Check\
    \ that the pieces in the player stock are unique\"\"\"\n\n        uniq = self.get_the_stock(reply)\n\
    \        len1 = len(uniq)\n        try:\n            uniq = set([tuple(i) for\
    \ i in uniq])\n        except TypeError:\n            raise WrongAnswer(\"An error\
    \ occurred while tests were processing your output.\\n\"\n                   \
    \           \"Make sure you output pieces in the required format.\")\n       \
    \ len2 = len(uniq)\n        if len1 != len2:\n            return False\n     \
    \   return True\n\n    def check_the_snake(self, reply, ds):\n        \"\"\"Check\
    \ that the domino snake is really the maximum\"\"\"\n\n        stock = self.get_the_stock(reply)\n\
    \        stock = [i for i in stock if i[0] == i[1]]\n        if len(stock) > 0:\n\
    \            if ds and type(ds[0]) != int:\n                raise WrongAnswer(\"\
    The domino snake is supposed to be a list containing two integers.\\n\"\n    \
    \                              \"Please, make sure you output the domino snake\
    \ in the required format.\")\n            if ds < sorted(stock, reverse=True)[0]:\n\
    \                return False\n        return True\n\n    def check_the_length(self,\
    \ reply, cs):\n        stock = self.get_the_stock(reply)\n        opt = len(stock)\
    \ == 7 and cs == 6\n        opt2 = len(stock) == 6 and cs == 7\n        if not\
    \ (opt or opt2):\n            return False\n        return True\n\n    def check_the_status(self,\
    \ reply, cs):\n        \"\"\"Check if the status is right\"\"\"\n\n        opt\
    \ = cs == 7 and \"computer is\" in reply.lower()\n        opt2 = cs == 6 and \"\
    your turn\" in reply\n        if not (opt or opt2):\n            return False\n\
    \        return True\n\n    def check(self, reply: list, attach: Any) -> CheckResult:\n\
    \        if not self.check_the_stock(reply):\n            return CheckResult.wrong(\"\
    Your pieces are not unique\")\n        replyk = [i for i in reply.split('\\n')\
    \ if i]\n        if \"=\" in replyk[0].strip() and replyk[0].strip() != \"=\"\
    \ * 70:\n            return CheckResult.wrong(\"The design is not right. \"\n\
    \                                     \"You need to print the header using 70\
    \ equal sign characters (=), \"\n                                     f\"but {len(replyk[0].strip())}\
    \ characters were found.\")\n        elif \"=\" not in reply[0].strip():\n   \
    \         return CheckResult.wrong(\"The design is not right. \"\n           \
    \                          \"You need to print the header using 70 equal sign\
    \ characters (=).\")\n        try:\n            stock_size = int(replyk[1].split()[-1])\n\
    \        except ValueError:\n            raise WrongAnswer(\"The stock size doesn't\
    \ seem to be printed in the correct format. \\n\"\n                          \
    \    \"Please, output it in the format: \\\"Stock size: N\\\",\\n\"\n        \
    \                      \"where N is a number.\")\n        if stock_size != 14:\n\
    \            return CheckResult.wrong(\"The stock is not right\")\n        try:\n\
    \            domino_snake = ast.literal_eval(replyk[3])\n        except (IndentationError,\
    \ SyntaxError, ValueError):\n            raise WrongAnswer(\"Domino pieces don't\
    \ seem to be printed in the correct format.\")\n\n        if not self.check_the_snake(reply,\
    \ domino_snake):\n            return CheckResult.wrong(\"The domino snake should\
    \ be the maximum\")\n        try:\n            cs = int(replyk[2].split()[-1])\n\
    \        except ValueError:\n            raise WrongAnswer(\"Computer pieces don't\
    \ seem to be printed in the correct format. \\n\"\n                          \
    \    \"Please, output them in the format: \\\"Computer pieces: N\\\",\\n\"\n \
    \                             \"where N is a number.\")\n        if not 6 <= cs\
    \ <= 7:\n            return CheckResult.wrong(\"The computer pieces are not right\"\
    )\n        if not self.check_the_length(reply, cs):\n            return CheckResult.wrong(\"\
    Something is not right about the pieces played\")\n        if not self.check_the_status(reply,\
    \ cs):\n            return CheckResult.wrong(\"The status of the game is wrong.\
    \ \"\n                                     \"Please, make sure that the status\
    \ is the player, who is to make the next move.\")\n        return CheckResult.correct()\n\
    \n\nif __name__ == '__main__':\n    TestStage2('dominoes.dominoes').run_tests()\n"
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/11856#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 02 Nov 2022 04:06:39 UTC
record: -1
