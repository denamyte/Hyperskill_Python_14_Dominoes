type: edu
files:
- name: dominoes/dominoes.py
  visible: true
  text: |
    # Write your code here
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TestStage5

    if __name__ == '__main__':
        TestStage5('dominoes.dominoes').run_tests()
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from typing import List, Any
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    from hstest.exceptions import WrongAnswerException
    import ast


    class TestStage5(StageTest):
        first_move: bool

        def generate(self) -> List[TestCase]:
            list_of_funcs = [self.func1, self.func2, self.func3, self.func4, self.func5,
                             self.func6, self.func7, self.func8, (46, self.func9)]
            return [
                TestCase(stdin=list_of_funcs,
                         check_function=self.check_the_win),
                TestCase(stdin=list_of_funcs,
                         check_function=self.check_the_win),
                TestCase(stdin=list_of_funcs,
                         check_function=self.check_the_win),
                TestCase(stdin=list_of_funcs,
                         check_function=self.check_the_win),
                TestCase(stdin=list_of_funcs,
                         check_function=self.check_the_win),
                TestCase(stdin=list_of_funcs,
                         check_function=self.check_the_win),
                TestCase(stdin=list_of_funcs,
                         check_function=self.check_the_win),
                TestCase(stdin=list_of_funcs,
                         check_function=self.check_the_win),
            ]

        current_status = ""
        current_stock_size = 14
        current_computer_pieces = 7
        current_player_pieces = 6
        current_domino_snake = []
        chosen_piece = []
        left_end = []
        right_end = []

        def get_the_computer_pieces(self, output):
            """Get the amount of computer pieces"""

            output_parsed = self.parse_the_output(output)
            try:
                len_comp_pieces = int([i.strip() for i in output_parsed[2].split(':')][-1])
            except ValueError:
                raise WrongAnswerException("Make sure your output is formatted according to the examples")
            return len_comp_pieces

        def check_computer_pieces(self, output):
            """Check if the amount is right"""

            len_comp_pieces = self.get_the_computer_pieces(output)
            if len_comp_pieces != self.current_computer_pieces:
                return False
            return True

        def parse_the_output(self, output):
            """Parse the output"""

            out_parsed = [i.strip() for i in output.split('\n') if i]
            return out_parsed

        def get_the_stock(self, output):
            """Get the player's stock"""

            out_parsed = self.parse_the_output(output)
            try_stock = [i for i in out_parsed if ':[' in i.replace(' ', '')]
            try:
                the_stock = [ast.literal_eval(i[-6:]) for i in try_stock]
            except (ValueError, SyntaxError):
                raise WrongAnswerException("An error occurred while processing your output.\n"
                                           "Please make sure that your program's output is formatted exactly as described.")
            return the_stock

        def check_player_unique(self, output):
            """Check that the player pieces are uniqe"""

            uniq = self.get_the_stock(output)
            len1 = len(uniq)
            uniq = set([tuple(i) for i in uniq])
            len2 = len(uniq)
            if len1 != len2:
                return False
            return True

        def get_the_ends(self, output):
            """Get the ends of the domino snake"""

            try:
                domino_snake = self.parse_the_output(output)[3]
                self.left_end = ast.literal_eval(domino_snake[:6])
                self.right_end = ast.literal_eval(domino_snake[-6:])
            except (SyntaxError, ValueError, IndexError):
                raise WrongAnswerException("Make sure your output is formatted according to the examples")

        def choose_the_piece(self, output):
            """Choose the piece for the player to pick"""

            self.get_the_ends(output)
            try:
                end1 = self.left_end[0]
                end2 = self.right_end[1]
            except Exception:
                raise WrongAnswerException("Your output has wrong format! Make sure you print the pieces like in example!")
            player_stock = self.get_the_stock(output)
            for i, j in enumerate(player_stock):
                if end2 in j:
                    return str(i + 1)
                elif end1 in j:
                    return str(-(i + 1))
            else:
                return '0'

        def check_the_piece(self, output):
            """Check if the piece added is acceptable"""

            domino_snake = self.parse_the_output(output)[3]
            try:
                new1 = ast.literal_eval(domino_snake[:6])
                new2 = ast.literal_eval(domino_snake[-6:])
            except (ValueError, SyntaxError):
                raise WrongAnswerException("An error occurred while processing your output.\n"
                                           "Please make sure that your program's output is formatted exactly as described.")
            new_to_check = []
            if new1 != self.left_end:
                new_to_check = new1
            elif new2 != self.right_end:
                new_to_check = new2
            if new_to_check:
                if new_to_check[1] != self.left_end[0]:
                    return False
                elif new_to_check[0] != self.right_end[1]:
                    return False
            return True

        def check_the_design(self, output):
            """Check that the design is right"""

            output_parsed = self.parse_the_output(output)
            design = '=' * 70
            if output_parsed[0] != design:
                return False
            return True

        def get_stock_size(self, output):
            """Get the stock size"""

            output_parsed = self.parse_the_output(output)
            try:
                stock_size = int([i.strip() for i in output_parsed[1].split(':')][-1])
            except ValueError:
                raise WrongAnswerException("Make sure your output is formatted according to the examples")
            return stock_size

        def check_stock_size(self, output):
            """Check the stock size"""

            stock_size = self.get_stock_size(output)
            if stock_size != self.current_stock_size:
                return False
            return True

        def check_the_status(self, output):
            """Check if the status is correct"""

            output_parsed = self.parse_the_output(output)
            status_from_output = 'computer' if 'computer' in output_parsed[-1].lower() else 'player'
            if status_from_output != self.current_status:
                return False
            return True

        def choose_false(self, output):
            """Choose the piece for the player to pick"""

            self.get_the_ends(output)
            end1 = self.left_end[0]
            end2 = self.right_end[1]
            player_stock = self.get_the_stock(output)
            for i, j in enumerate(player_stock):
                if end2 not in j and end1 not in j:
                    return str(i + 1)

        def check_the_move(self, output, to_fail=False, mistake=None):
            """Check the result when the computer made a move"""

            if not self.check_the_design(output):
                raise WrongAnswerException("The design is not right")
            if not self.check_stock_size(output):
                raise WrongAnswerException("The stock size is not right")
            if not self.check_computer_pieces(output):
                raise WrongAnswerException("The amount of computer pieces is not right")
            if not self.check_player_unique(output):
                raise WrongAnswerException("The player pieces are not unique")
            if not self.check_the_status(output):
                raise WrongAnswerException("The result is not right")
            if not self.check_the_piece(output):
                raise WrongAnswerException("The piece added is illegal")
            if 'computer is' in output.lower():
                self.current_status = 'player'
                return '\n'
            else:
                self.current_status = 'computer'
                if to_fail:
                    return self.choose_false(output)
                if mistake is not None:
                    return mistake
                else:
                    return self.choose_the_piece(output)

        def set_the_currents(self, output):
            """Too random, need to consider computer options"""

            error = WrongAnswerException(
                f"Make sure you calculate the number of stock and computer pieces correctly")

            self.get_the_ends(output)
            if self.current_status == 'player':
                stock_dif = self.get_stock_size(output) - self.current_stock_size
                comp_dif = self.get_the_computer_pieces(output) - self.current_computer_pieces

                if self.first_move:
                    if stock_dif != 0 or comp_dif != 0:
                        raise error
                    else:
                        return

                # if the computer took a piece from the stock
                if stock_dif == -1 and comp_dif == 1:
                    self.current_computer_pieces += 1
                    self.current_stock_size -= 1
                # if the computer made a move
                elif stock_dif == 0 and comp_dif == -1:
                    self.current_computer_pieces -= 1
                elif self.get_stock_size(output) == 0:
                    return
                else:
                    raise error

            elif self.current_status == 'computer':
                stock_dif = self.get_stock_size(output) - self.current_stock_size
                player_dif = len(self.get_the_stock(output)) - self.current_player_pieces

                if self.first_move:
                    if stock_dif != 0 or player_dif != 0:
                        raise error
                    else:
                        return

                # if player took piece from the
                if stock_dif == -1 and player_dif == 1:
                    self.current_player_pieces += 1
                    self.current_stock_size -= 1
                # if the player made a move
                elif stock_dif == 0 and player_dif == -1:
                    self.current_player_pieces -= 1
                elif self.get_stock_size(output) == 0:
                    return
                else:
                    raise error

        def func1(self, output):
            self.chosen_piece = []
            if "computer is" in output.lower():
                self.current_stock_size = 14
                self.current_player_pieces = 6
                self.current_computer_pieces = 7
                self.current_status = 'computer'
            else:
                self.current_stock_size = 14
                self.current_player_pieces = 7
                self.current_computer_pieces = 6
                self.current_status = 'player'

            self.first_move = True
            self.set_the_currents(output)
            self.first_move = False
            return self.check_the_move(output)

        def func2(self, output):
            self.set_the_currents(output)
            return self.check_the_move(output)

        def func3(self, output):
            self.set_the_currents(output)
            self.chosen_piece = self.choose_the_piece(output)
            return self.check_the_move(output, to_fail=True)

        def func4(self, output):
            if self.current_status == 'computer':
                if "illegal move. please try again" not in output.lower():
                    return CheckResult.wrong("The player should be informed about tne incorrect move")
                return self.chosen_piece
            else:
                self.set_the_currents(output)
                return self.check_the_move(output)

        def func5(self, output):
            self.set_the_currents(output)
            return self.check_the_move(output)

        def func6(self, output):
            self.set_the_currents(output)
            self.chosen_piece = self.choose_the_piece(output)
            return self.check_the_move(output, mistake='-25')

        def func7(self, output):
            if self.current_status == 'computer':
                if "invalid input. please try again." not in output.lower():
                    return CheckResult.wrong("The player should be informed about tne incorrect move")
                return self.chosen_piece
            else:
                self.set_the_currents(output)
                return self.check_the_move(output)

        def func8(self, output):
            self.set_the_currents(output)
            return self.check_the_move(output)

        def func9(self, output):
            self.set_the_currents(output)
            return self.check_the_move(output)

        def check_the_win(self, reply: str, attach: Any) -> CheckResult:
            design = '=' * 70
            if not reply:
                raise WrongAnswerException("The reply is empty. Please, output the required data.")
            reply_parsed = reply.split(design)
            the_last = [i.strip() for i in reply_parsed[-1].strip().split('\n') if i]
            try:
                comp_pieces = int([i.strip() for i in the_last[1].split(':') if i][-1])
            except Exception:
                raise WrongAnswerException("Make sure you output pieces in the required format.")

            last_output = reply_parsed[-1].replace(' ', '')
            # check for the win
            if '1:[' not in last_output:
                if ':[' in last_output or comp_pieces == 0:
                    return CheckResult.wrong("The result is wrong")
                if "the game is over. you won" not in the_last[-1].lower():
                    return CheckResult.wrong("The status is not right")
            # check for the computer win
            elif int(the_last[1][-1]) == 0:
                if ':[' not in last_output or comp_pieces > 0:
                    return CheckResult.wrong("The result is wrong")
                if "the game is over. the computer won" not in the_last[-1].lower():
                    return CheckResult.wrong("The status is not right")
            else:
                if "the game is over. it's a draw" not in the_last[-1].lower():
                    return CheckResult.wrong("The status is not right")
            return CheckResult.correct()


    if __name__ == '__main__':
        TestStage5('dominoes.dominoes').run_tests()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: dominoes/domino_menu.py
  visible: true
  text: |
    from typing import List

    from Dominoes.task.dominoes.domino_game import DominoGame, Status
    from Dominoes.task.dominoes.domino_items import DominoPiece

    STATUS_MAP = {Status.COMPUTER: '\nStatus: Computer is about to make a move. Press Enter to continue...',
                  Status.PLAYER: "\nStatus: It's your turn to make a move. Enter your command.",
                  Status.WIN: '\nStatus: The game is over. You won!',
                  Status.LOOSE: '\nStatus: The game is over. The computer won!',
                  Status.DRAW: "\nStatus: The game is over. It's a draw!"}
    END_GAME_STATUSES = (Status.WIN, Status.LOOSE, Status.DRAW)


    class DominoMenu:
        def __init__(self, game: DominoGame):
            self._game = game

        def menu_loop(self):
            while True:
                self._show_menu()
                if self._game.status not in END_GAME_STATUSES:
                    self._next_move_prompt()
                else:
                    break

        def _show_menu(self):
            self._header()
            self._stock_size()
            self._computer_pieces()
            self._snake()
            self._player_pieces()
            self._status()

        def _next_move_prompt(self):
            if self._game.status == Status.PLAYER:
                while True:
                    try:
                        move = int(input())
                        if abs(move) <= self._game.player_size:
                            if not self._game.move_matches_snake(move):
                                self._illegal_move()
                                continue
                            self._game.player_move(move)
                            break
                    except ValueError:
                        pass
                    self._invalid_input()
            else:
                input()
                self._game.computer_move()

        @staticmethod
        def _header():
            print('=' * 70)

        def _stock_size(self):
            print('Stock size:', self._game.stock_size)

        def _computer_pieces(self):
            print('Computer pieces:', self._game.comp_size)

        def _snake(self):
            pieces = self._game.snake_pieces
            if len(pieces) > 6:
                self._snake_detail(pieces[:3])
                print('...', end='')
                self._snake_detail(pieces[-3:])
            else:
                self._snake_detail(pieces)
            print()

        @staticmethod
        def _snake_detail(pieces: List[DominoPiece]):
            print(''.join(str(p) for p in pieces), end='')

        def _player_pieces(self):
            print('\nYour pieces:')
            for i, p in enumerate(self._game.player_pieces):
                print(f'{i + 1}:{p}')

        def _status(self):
            print(STATUS_MAP[self._game.status])

        @staticmethod
        def _invalid_input():
            print('Invalid input. Please try again.')

        @staticmethod
        def _illegal_move():
            print('Illegal move. Please try again.')
  learner_created: true
- name: dominoes/domino_items.py
  visible: true
  text: |
    from typing import Iterable, Tuple, List
    from random import shuffle


    class DominoPiece:
        def __init__(self, left: int, right: int):
            self._left = left
            self._right = right

        def has_value(self, value: int):
            return self._left == value or self._right == value

        @property
        def left(self):
            return self._left

        @property
        def right(self):
            return self._right

        def __str__(self):
            return f'[{self._left}, {self._right}]'


    class DominoPile:
        def __init__(self, pieces: Iterable[DominoPiece]):
            self._pieces = list(pieces)

        def read_piece(self, index: int) -> DominoPiece | None:
            return None \
                if index < 0 or index >= len(self._pieces) \
                else DominoPiece(self._pieces[index].left, self._pieces[index].right)

        def pop_piece(self, index: int) -> DominoPiece | None:
            return None \
                if index < 0 or index >= len(self._pieces) \
                else self._pieces.pop(index)

        def add_piece(self, piece: DominoPiece, to_end=True):
            if to_end:
                self._pieces.append(piece)
            else:
                self._pieces.insert(0, piece)

        @property
        def size(self):
            return len(self._pieces)

        @property
        def pieces(self) -> List[DominoPiece]:
            return self._pieces[:]

        def __str__(self):
            return '[{}]'.format(', '.join(str(p) for p in self._pieces))


    class DominoStock(DominoPile):
        def __init__(self, pieces: Iterable[DominoPiece]):
            super().__init__(pieces)

        def shuffle(self):
            shuffle(self._pieces)

        def pop_first_n(self, n: int) -> Iterable[DominoPiece]:
            if n > len(self._pieces):
                return []
            popped = self._pieces[:n]
            self._pieces = self._pieces[n:]
            return popped


    class DominoPlayer(DominoPile):
        def __init__(self, pieces: Iterable[DominoPiece], name: str):
            super().__init__(pieces)
            self._name = name

        def highest_double_index_value(self) -> Tuple[int, int]:
            index, value = -1, -1
            for i, p in enumerate(self._pieces):
                if p.left == p.right and p.left > value:
                    index = i
                    value = p.left
            return index, value

        @property
        def name(self) -> str:
            return self._name


    class DominoSnake(DominoPile):
        def __init__(self, pieces: Iterable[DominoPiece]):
            super().__init__(pieces)

        @property
        def left(self) -> int:
            return self._pieces[0].left if self.size > 0 else 0

        @property
        def right(self):
            return self._pieces[self.size - 1].right if self.size > 0 else 0

        def add_piece(self, piece: DominoPiece, to_end=True):
            if self.size > 0 and piece.left != piece.right \
                    and ((not to_end and piece.left == self.left)
                         or (to_end and piece.right == self.right)):
                piece = DominoPiece(piece.right, piece.left)
            super().add_piece(piece, to_end)

        def count_value_times(self, value: int):
            return sum([p.left, p.right].count(value) for p in self._pieces)

        def piece_matches(self, piece: DominoPiece, to_end: bool) -> bool:
            return piece.has_value(self.right) if to_end else piece.has_value(self.left)
  learner_created: true
- name: dominoes/domino_game.py
  visible: true
  text: |
    from enum import Enum, IntEnum
    from random import randint
    from typing import List

    from Dominoes.task.dominoes.domino_items import DominoPiece, DominoPlayer, DominoStock, DominoSnake


    class Indices(IntEnum):
        COMPUTER = 0
        PLAYER = 1


    class Status(Enum):
        COMPUTER = 'computer'
        PLAYER = 'player'
        WIN = 'win'
        LOOSE = 'loose'
        DRAW = 'draw'


    class DominoGame:
        def __init__(self):
            self._stock: DominoStock | None = None
            self._players: List[DominoPlayer] = []
            self._snake: DominoSnake | None = None
            self._move_index = -1
            self._status = Status.PLAYER
            self._generate_dominoes()

        def _generate_dominoes(self):
            while True:
                self._stock = DominoStock(DominoPiece(left, right)
                                          for left in range(7)
                                          for right in range(left, 7))
                self._stock.shuffle()
                self._players = [DominoPlayer(self._stock.pop_first_n(7), name) for name in ('computer', 'player')]
                highest_double_indices = tuple(p.highest_double_index_value() for p in self._players)
                if sum(map(lambda x: x[0], highest_double_indices)) == -len(highest_double_indices):
                    continue

                highest_value = -1
                player_to_donate_index = -1
                highest_value_index = -1
                for i, highest_double_tuple in enumerate(highest_double_indices):
                    if highest_double_tuple[1] > highest_value:
                        highest_value = highest_double_tuple[1]
                        player_to_donate_index = i
                        highest_value_index = highest_double_tuple[0]

                start_piece = self._players[player_to_donate_index].pop_piece(highest_value_index)
                self._snake = DominoSnake([start_piece])
                self._move_index = player_to_donate_index
                self._adjust_move_status()
                break

        def computer_move(self):
            move = self._select_computer_move()
            self._move(move)

        def _select_computer_move(self):
            size = self._players[Indices.COMPUTER].size
            for i in range(size, 0, -1):
                if self.move_matches_snake(i):
                    return i
                elif self.move_matches_snake(-i):
                    return -i
            return 0

        def player_move(self, move: int):
            self._move(move)

        def move_matches_snake(self, move: int):
            if move == 0:
                return True
            player = self._players[self._move_index]
            piece = player.read_piece(abs(move) - 1)
            return self._snake.piece_matches(piece, move > 0)

        def _move(self, move: int):
            player = self._players[self._move_index]
            if move == 0:
                if self._stock.size > 0:
                    piece = self._stock.pop_piece(self._stock.size - 1)
                    player.add_piece(piece)

                self._adjust_move_status()
            else:
                piece = player.pop_piece(abs(move) - 1)
                self._snake.add_piece(piece, move > 0)
                if not player.size:
                    self._status = Status.WIN if self._status == Status.PLAYER else Status.LOOSE
                else:
                    self._check_draw_status()
                    if self.status != Status.DRAW:
                        self._adjust_move_status()

        def _check_draw_status(self):
            s = self._snake
            if s.size >= 7 and s.left == s.right and s.count_value_times(s.left) == 8:
                self._status = Status.DRAW

        def _adjust_move_status(self):
            self._move_index = (self._move_index + 1) % len(self._players)
            self._status = Status.COMPUTER if self._move_index == Indices.COMPUTER else Status.PLAYER

        @property
        def stock_size(self) -> int:
            return self._stock.size

        @property
        def comp_size(self) -> int:
            return self._players[Indices.COMPUTER].size

        @property
        def player_size(self) -> int:
            return self._players[Indices.PLAYER].size

        @property
        def snake_pieces(self) -> List[DominoPiece]:
            return self._snake.pieces

        @property
        def player_pieces(self) -> List[DominoPiece]:
            return self._players[Indices.PLAYER].pieces

        @property
        def status(self) -> Status:
            return self._status
  learner_created: true
- name: dominoes/domino_score.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11859#comment
status: Unchecked
record: -1
